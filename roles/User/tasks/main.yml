---
- name: Create user and assign to groups
  shell: useradd --badnames {{ user.name }} -m -s {{ user.shell }} -u {{ user.uid }} -G wheel,autologin

- name: Change user password
  user:
    name: {{ user.name }}
    update_password: always
    password: {{ user.password }}

- name: Install sudo package
  pacman: 
    name: sudo
    state: present
    
- name: Copy sudo configuration
  copy: 
   src: sudoers
   dest: /etc/sudoers
   mode: 0440
   validate: 'visudo -cf %s'

- name: Create home directory skel
  file: 
    path: /home/{{ user.name }}/{{ item }} 
    state: directory 
    mode: 0755
  become: yes
  become_user: "{{ user.name }}"
  with_items: "{{ home_skel }}"

- name: Copy privkey to remote server
  copy: 
    src: privkey 
    dest: /home/{{ user.name }}/.ssh/ansible 
    owner: {{ user.name }} 
    group: {{ user.group }} 
    mode: 0600

- name: Download and install in bin the z.sh script
  get_url: 
    url: https://raw.githubusercontent.com/rupa/z/master/z.sh 
    dest: /home/{{ user.name }}/bin/z.sh 
    mode: 0755
  become: yes
  become_user: "{{ user.name }}"

- name: Create autoload directory
  file: 
    path: /home/{{ user.name }}/.vim/autoload 
    state: directory
  become: yes
  become_user: "{{ user.name }}"

- name: Clone plug for vim
  get_url: 
    url: {{ plug.url }} 
    dest: /home/{{ user.name }}/{{ plug.destination }}
  when: plug is defined
  become: yes
  become_user: "{{ user.name }}"

- name: Install Vim plugins
  command: "vim +PlugInstall +qall"
  when: plug is defined
  become: yes
  become_user: "{{ user.name }}"

- name: create backup directory for vim
  file: 
    path: "/home/{{ user.name }}/.vim/backup" 
    state: directory
  become: yes
  become_user: "{{ user.name }}"

- name: create swap directory for vim
  file: 
    path: "/home/{{ user.name }}/.vim/swap" 
    state: directory
  become: yes
  become_user: "{{ user.name }}"

- name: Clone user dotfiles
  git: 
    repo: {{ dotfiles.url }} 
    dest: /home/{{ user.name }}/{{ dotfiles.destination }} 
    accept_hostkey: yes 
    update: yes 
    key_file: {{ dotfiles.key }}
  when: dotfiles is defined
  become: yes
  become_user: "{{ user.name }}"

- name: Install user dotfiles
  synchronize: 
    src: /home/{{ user.name}}/{{ dotfiles.destination}}/ 
    dest: /home/{{ user.name }}/ 
    archive: yes rsync_opts=--exclude=.git,--exclude=_config.yml,--exclude=LICENSE,--exclude=README.md
  when: dotfiles is defined
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: "{{ user.name }}"
